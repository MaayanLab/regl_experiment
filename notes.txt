1-2-2018 Notes
===============
  Run

    >> budo matrix_example.js --open --live -- -t es2020

  in the

    matrix_multi-camera-zoom

  directory


2D label Notes
==============
Nicolas Fernandez @cornhundred 11:55
Is the way text is rendered in the text.js example from the gallery (using vectorize-text) a good way to render a lot of text (e.g. thousands of labels) or is there a more optimal way? I tried using instancing to make thousands of labels and zooming became less responsive around 10 thousand labels (https://github.com/MaayanLab/regl_experiment/blob/master/text_example.js).

Josh Groves @grovesNL 12:04
If you're trying to draw thousands of labels it's probably better to draw billboards (2d textures with glyphs) rather than meshes of the 3d text
it depends if you need to render 3d labels I guess
The approach I mentioned earlier (bitmap or sdf glyphs rendererd as instanced quads) should be reasonably fast
If the labels are all static and there aren't that many different kinds of labels, then you could use a texture atlas with instanced quads

Josh Groves @grovesNL 12:14
let me know if this isn't clear, I spent a lot of time on a similar problem a while ago

Nicolas Fernandez @cornhundred 12:39
thanks @grovesNL, I'll look these things up. Also, I don't need 3D labels


instancing notes
===================
  gitter info

  "yeah, instancing uses gpu hardware
  batching reduces number of bind state changes, but still requires multiple draw calls
  instancing reuses the same draw call, but requires an extension"

  Mikola Lysenko @mikolalysenko 15:24
  in general yes

  Nicolas Fernandez @cornhundred 15:24
  thanks

  Mikola Lysenko @mikolalysenko 15:24
  as always there are caveats and special cases....

  Nicolas Fernandez @cornhundred 15:25
  okay

  Mikola Lysenko @mikolalysenko 15:27
  but instancing is generally < draw calls/vertex processing which means better per


Working through examples from

https://regl.neocities.org/01-hello.html

regl
====

Install regl using npm

  npm install regl

browserify
==========

Use browersify to compile all of your dependencies into a payload of JS that you can deliver in a single script tag

  sudo npm install -g browersify

This will give you a browserify command you can invoke starting from a file, such as main.js and will create a bundle of all the files necessary to run your project =

Start by writing code that requires regl and other libs in main.jg and then you can run browserify to produce bundle.js

  browersify main.js > bundle.js

budo
====
  npm install -g budo
In development, it's nice to have a tool that will recompile your code every time you make a change to a file. You can use budo to incrementally recompile your code like so:

  budo main.js -- open

This command will compile your code using browserify, set up a local http server with your code in a basic html scaffold and open a web browser.

Every time you change your code, you can reload the page. If you prefer budo to handle that for you, you can pass in --live:

  budo main.js --open --live

and budo will reload the page whenever a file changes.

aside: ES6
==========
ECMAScript version 6 (ES6) is a new version of JS, which is currently being rolled out. It adds many nice features like template strings which make writing shader code much easier.

...

  npm install es2020

  browserify -r es2020 main.js > bundle.js

Or in budo

  budo main.js --open --live -- -t es2020


Using smoothly animate example

  browserify -t glslify -r es2020 main.js > bundle.js

  or

  budo main.js --open --live -- -t es2020 -t glslify


Links from gitter
=================

https://threejs.org/examples/webgl_materials_blending_custom.html

http://www.andersriggelsen.dk/glblendfunc.php


Frame question
using chrome developer tools to check performance regl.frame seems to use a lot of gpu resources even when rendering a static visualization (e.g. the user is not zooming or panning). Is there a way to get regl.frame to only run when the user is interacting?